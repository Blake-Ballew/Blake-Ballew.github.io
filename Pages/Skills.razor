@page "/skills"
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Skills - Archive</PageTitle>

<div style="color: #0099FF; font-family: 'Courier New', monospace;">
    <div class="terminal-prompt" style="margin-bottom: 20px;">./compile_skills.elf @(selectedCategory != null ? "--" + selectedCategory.ToLower().Replace(" ", "_") : "")</div>
    
    @if (categories.Any())
    {
        <div style="margin-left: 20px; margin-bottom: 20px;">
            <div style="margin-bottom: 10px; color: #0077CC;">Filter by category:</div>
            <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                <MudButton Variant="@(selectedCategory == null ? Variant.Filled : Variant.Outlined)"
                           Size="Size.Small"
                           Style="@GetCategoryButtonStyle(selectedCategory == null)"
                           @onclick="ClearCategoryFilter">
                    all
                </MudButton>
                @foreach (var category in categories)
                {
                    <MudButton Variant="@(selectedCategory == category.Name ? Variant.Filled : Variant.Outlined)"
                               Size="Size.Small"
                               Style="@GetCategoryButtonStyle(selectedCategory == category.Name)"
                               @onclick="() => SetCategoryFilter(category.Name)">
                        @category.Name.ToLower().Replace(" ", "_")
                    </MudButton>
                }
            </div>
        </div>
        
        <div style="margin-left: 20px; margin-bottom: 30px;">
            @foreach (var category in filteredCategories)
            {
                <div style="margin-bottom: 25px;">
                    <div style="display: flex; align-items: center; margin-bottom: 15px;">
                        <MudButton Variant="Variant.Text" 
                                   Style="color: #0099FF; font-family: 'Courier New', monospace; text-transform: none; padding: 4px 8px; margin-right: 12px;"
                                   @onclick="() => ToggleCategory(category.Name)">
                            @if (expandedCategories.Contains(category.Name))
                            {
                                <span>▼ [@category.Name]</span>
                            }
                            else
                            {
                                <span>▶ [@category.Name]</span>
                            }
                        </MudButton>
                        <span class="skill-count">@category.Skills.Count skills</span>
                    </div>
                    
                    @if (expandedCategories.Contains(category.Name))
                    {
                        <div class="terminal-window" style="margin: 10px 0 20px 20px;">
                            <div class="terminal-header">
                                <MudText Style="color: #0099FF; font-family: 'Courier New', monospace; margin: 0;">
                                    <MudIcon Icon="@GetCategoryIcon(category.Icon)" Style="margin-right: 8px;" />
                                    cat skills/@(category.Name.ToLower().Replace(" ", "_")).txt
                                </MudText>
                            </div>
                            <div style="padding: 20px;">
                                <div class="skills-grid">
                                    @foreach (var skill in category.Skills.OrderByDescending(s => GetLevelValue(s.Level)))
                                    {
                                        <div class="skill-item">
                                            <div class="skill-header">
                                                <span class="skill-name">@skill.Name</span>
                                                <span class="skill-level @GetLevelClass(skill.Level)">@skill.Level</span>
                                            </div>
                                            <div class="skill-details">
                                                <div class="skill-experience">@skill.Years yr@(skill.Years != 1 ? "s" : "") experience</div>
                                                @* <div class="skill-description">@skill.Description</div> *@
                                                <div class="skill-bar">
                                                    <div class="skill-progress" style="width: @(GetLevelValue(skill.Level) * 25)%"></div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div style="margin-left: 20px; margin-bottom: 30px;">
            <div style="color: #0077CC;">Compiling skill matrix<span class="blinking-cursor"></span></div>
        </div>
    }
    
    <div class="terminal-prompt" style="margin-bottom: 20px;">echo "Skills compilation complete"</div>
    <div style="margin-left: 20px; margin-bottom: 20px; color: #0077CC;">
        Categories loaded: @categories.Count<br/>
        Total skills: @categories.Sum(c => c.Skills.Count)<br/>
        Active filter: @(selectedCategory ?? "none")<br/>
        Build status: SUCCESS
    </div>
    
    <div class="terminal-prompt blinking-cursor"></div>
</div>

@code {
    private List<SkillCategory> categories = new();
    private List<SkillCategory> filteredCategories = new();
    private HashSet<string> expandedCategories = new();
    private string? selectedCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadSkills();
    }

    private async Task LoadSkills()
    {
        try
        {
            var jsonContent = await Http.GetStringAsync("skills.json");
            var skillsData = JsonSerializer.Deserialize<SkillsData>(jsonContent, new JsonSerializerOptions 
            { 
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase 
            });
            
            if (skillsData?.Categories != null)
            {
                categories = skillsData.Categories;
                UpdateFilteredCategories();
                
                // Auto-expand first category
                if (categories.Any())
                {
                    expandedCategories.Add(categories.First().Name);
                }
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading skills: {ex.Message}");
        }
    }

    private void UpdateFilteredCategories()
    {
        if (selectedCategory == null)
        {
            filteredCategories = categories.ToList();
        }
        else
        {
            filteredCategories = categories.Where(c => c.Name == selectedCategory).ToList();
        }
    }

    private void ToggleCategory(string categoryName)
    {
        if (expandedCategories.Contains(categoryName))
        {
            expandedCategories.Remove(categoryName);
        }
        else
        {
            expandedCategories.Add(categoryName);
        }
        
        StateHasChanged();
    }

    private void SetCategoryFilter(string categoryName)
    {
        selectedCategory = categoryName;
        UpdateFilteredCategories();
        
        // Auto-expand filtered category
        if (!expandedCategories.Contains(categoryName))
        {
            expandedCategories.Add(categoryName);
        }
        
        StateHasChanged();
    }

    private void ClearCategoryFilter()
    {
        selectedCategory = null;
        UpdateFilteredCategories();
        StateHasChanged();
    }

    private string GetCategoryButtonStyle(bool isSelected)
    {
        if (isSelected)
        {
            return "background-color: #0099FF; color: #000000; border-color: #0099FF; font-family: 'Courier New', monospace; text-transform: none;";
        }
        else
        {
            return "background-color: transparent; color: #0099FF; border-color: #0099FF; font-family: 'Courier New', monospace; text-transform: none;";
        }
    }

    private string GetCategoryIcon(string iconName)
    {
        return iconName switch
        {
            "server" => Icons.Material.Filled.Computer,
            "memory" => Icons.Material.Filled.Memory,
            "developer_board" => Icons.Material.Filled.DeveloperBoard,
            "code" => Icons.Material.Filled.Code,
            "build" => Icons.Material.Filled.Build,
            "account_tree" => Icons.Material.Filled.AccountTree,
            _ => Icons.Material.Filled.Category
        };
    }

    private int GetLevelValue(string level)
    {
        return level.ToLower() switch
        {
            "expert" => 4,
            "advanced" => 3,
            "intermediate" => 2,
            "beginner" => 1,
            _ => 1
        };
    }

    private string GetLevelClass(string level)
    {
        return level.ToLower() switch
        {
            "expert" => "level-expert",
            "advanced" => "level-advanced", 
            "intermediate" => "level-intermediate",
            "beginner" => "level-beginner",
            _ => "level-beginner"
        };
    }

    private class SkillsData
    {
        public List<SkillCategory> Categories { get; set; } = new();
    }

    private class SkillCategory
    {
        public string Name { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public List<Skill> Skills { get; set; } = new();
    }

    private class Skill
    {
        public string Name { get; set; } = string.Empty;
        public string Level { get; set; } = string.Empty;
        public int Years { get; set; }
    }
}

<style>
    /* Skills styling */
    .skill-count {
        color: #0077CC;
        font-size: 0.8em;
        background-color: #1a1a1a;
        border: 1px solid #0077CC;
        border-radius: 3px;
        padding: 2px 6px;
        font-family: 'Courier New', monospace;
    }

    .skills-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 15px;
    }

    .skill-item {
        background-color: #111111;
        border: 1px solid #0077CC;
        border-radius: 5px;
        padding: 12px;
        box-shadow: 0 0 5px rgba(0, 153, 255, 0.2);
    }

    .skill-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .skill-name {
        color: #0099FF;
        font-weight: bold;
        font-size: 1em;
    }

    .skill-level {
        font-size: 0.75em;
        padding: 2px 6px;
        border-radius: 3px;
        text-transform: uppercase;
        font-weight: bold;
    }

    .level-expert {
        background-color: #0099FF;
        color: #000000;
    }

    .level-advanced {
        background-color: #0077CC;
        color: #FFFFFF;
    }

    .level-intermediate {
        background-color: #004499;
        color: #FFFFFF;
    }

    .level-beginner {
        background-color: #002266;
        color: #FFFFFF;
    }

    .skill-details {
        color: #0099FF;
        font-size: 0.85em;
    }

    .skill-experience {
        color: #33AAFF;
        margin-bottom: 4px;
    }

    .skill-description {
        color: #0077CC;
        line-height: 1.3;
        margin-bottom: 8px;
    }

    .skill-bar {
        background-color: #0a0a0a;
        border: 1px solid #0077CC;
        height: 4px;
        border-radius: 2px;
        overflow: hidden;
    }

    .skill-progress {
        background: linear-gradient(90deg, #004499, #0099FF);
        height: 100%;
        transition: width 0.5s ease;
    }
</style>